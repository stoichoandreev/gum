apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'//we can skip this plugin in Android Studio 2.2+ because of APK Analyzer, but it give us great ./gradlew scripts
apply plugin: 'me.tatarka.retrolambda'//we can remove this plugin but Jack and Jill is not stable yet


android {
    compileSdkVersion 25
    buildToolsVersion "25.0.1"
    compileOptions.incremental = true
    dataBinding.enabled = true
    testBuildType "debug"//can specify some other build type
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger()
        def name = versionProps['VERSION_NAME']
        defaultConfig {
            applicationId "uk.gum.advert"
            minSdkVersion 16
            targetSdkVersion 25
            versionCode code
            versionName name
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
        buildTypes {
            debug {
                debuggable true
                applicationIdSuffix ".debug"
                versionNameSuffix "-debug"
            }
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            java.excludes = ['src/androidTest/**']
        }
        androidTest.setRoot('src/androidTest')
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}
ext {
    //dependencies
    jUnit = '4.12'
    mockito = '1.10.19'
//    mockito = '2.2.28'//If we are using Mockito 2 we will have issues with missing class files in PowerMock, because Mockito 2 is changing a lot at the moment
    powermock = '1.6.6'
    easymock = '3.4'
    junitRunner = '0.5'
    espresso = '2.2.2'
    mockServer = '3.5.0'
    assertJ = '3.6.2'
    supportLibrary = '25.0.1'
    javaRX2 = '2.0.1'
    androidRX = '1.2.1'
    rxBinding = '1.0.0'
    picasso = '2.5.2'
    dagger = '2.9'

    dependencies {
        compile fileTree(dir: 'libs', include: ['*.jar'])
        compile "com.android.support:appcompat-v7:$supportLibrary"
        compile "com.android.support:design:$supportLibrary"
        compile "com.android.support:recyclerview-v7:$supportLibrary"
        compile "com.android.support:cardview-v7:$supportLibrary"
        compile "io.reactivex:rxandroid:$androidRX"
        compile "io.reactivex.rxjava2:rxjava:$javaRX2"
        compile "io.reactivex.rxjava2:rxandroid:$javaRX2"
        compile "com.jakewharton.rxbinding:rxbinding:$rxBinding"
        compile "com.jakewharton.rxbinding:rxbinding-appcompat-v7:$rxBinding"
        compile "com.squareup.picasso:picasso:$picasso"

        //TODO Dagger 2 and Android Data binding have issue between them. That is way Dagger to is gonna be out of this project for while
        //Dagger 2
        compile "com.google.dagger:dagger:$dagger"
        annotationProcessor "com.google.dagger:dagger-compiler:$dagger"
        provided 'javax.annotation:jsr250-api:1.0'
////        compile 'javax.annotation:javax.annotation-api:1.2'

        /*
        * Unit test tools (could need Robolectric as well)
         */
        testCompile "org.mockito:mockito-core:$mockito"
        testCompile "org.easymock:easymock:$easymock"
        testCompile "org.powermock:powermock-core:$powermock"
        testCompile "org.powermock:powermock-api-easymock:$powermock"
        testCompile "org.powermock:powermock-api-mockito:$powermock"
        testCompile "org.powermock:powermock-module-junit4:$powermock"
        testCompile "org.assertj:assertj-core:$assertJ"
        testCompile("com.android.support.test.espresso:espresso-contrib:$espresso") {
            exclude module: 'support-annotations'
            exclude group: 'com.android.support', module: 'appcompat'
            exclude group: 'com.android.support', module: 'support-v4'
            exclude group: 'com.android.support', module: 'design'
            exclude module: 'recyclerview-v7'
        }
        androidTestCompile("com.android.support.test.espresso:espresso-contrib:$espresso") {
            exclude module: 'support-annotations'
            exclude group: 'com.android.support', module: 'appcompat'
            exclude group: 'com.android.support', module: 'support-v4'
            exclude group: 'com.android.support', module: 'design'
            exclude module: 'recyclerview-v7'
        }
        //Android Instrumented test tools
        androidTestCompile "junit:junit:$jUnit"
        androidTestCompile("com.android.support.test:runner:$junitRunner") {
            exclude module: 'support-annotations'
        }
        androidTestCompile("com.android.support.test:rules:$junitRunner") {
            exclude module: 'support-annotations'
        }
        androidTestCompile("com.android.support.test.espresso:espresso-core:$espresso") {
            exclude module: 'support-annotations'
        }
        androidTestCompile("com.android.support.test.espresso:espresso-intents:$espresso") {
            exclude module: 'support-annotations'
        }
        androidTestCompile("com.squareup.okhttp3:mockwebserver:$mockServer") {
            exclude group: 'com.squareup.okhttp3', module: 'okhttp'
        }

        //For Dagger DI in Unit tests and Instrumentation tests
//        androidTestApt "com.google.dagger:dagger-compiler:$dagger"
//        testApt "com.google.dagger:dagger-compiler:$dagger"
    }
}
